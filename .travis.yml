sudo: true
language: c
services:
- docker

# This is a hook to help us introduce "soft" errors on our process
matrix:
  allow_failures:
    env: ALLOW_SOFT_FAILURE_HERE=true

# Install dependencies for all, once
#
install:
- sudo apt-get install -y libcap2-bin zlib1g-dev uuid-dev fakeroot libipmimonitoring-dev libmnl-dev libnetfilter-acct-dev gnupg python-pip
- source tests/installer/slack.sh

# Setup notification system
#
notifications:
  webhooks: https://app.fossa.io/hooks/travisci

# Define the stage sequence and conditionals
#
stages:
# Mandatory runs, we always want these executed
- name: Code quality, linting, syntax, code style
- name: Build process
- name: Artifacts validation

  # Nightly operations
- name: Nightly operations
  if: branch = master AND type = cron
- name: Nightly release
  if: branch = master AND type = cron

  # Scheduled releases
- name: Packaging for release
  if: branch = master AND type != pull_request AND type != cron
- name: Publish release
  if: branch = master AND type != pull_request AND type != cron


# Define stage implementation details
#
jobs:
  include:
    # Do code quality, syntax checking and other pre-build activities
  - stage: Code quality, linting, syntax, code style
    name: Run shellchecking on BASH
    script: shellcheck --format=gcc $(find . -name '*.sh.in' -not -iwholename '*.git*')

  - stage: Checksums
    name: Run checksum checks on kickstart files
    script: ./tests/installer/checksums.sh
    env: LOCAL_ONLY="true"

  - stage: Dashboard
    name: Web Dashboard pre-generated file consistency checks (dashboard.js)
    script: cp web/gui/dashboard.js /tmp/dashboard.js && ./build/build.sh && diff /tmp/dashboard.js web/gui/dashboard.js



    # Ensure netdata code builds successfully
  - stage: Build process
    name: Standard netdata build
    script: fakeroot ./netdata-installer.sh --install $HOME --dont-wait --dont-start-it --enable-plugin-nfacct --enable-plugin-freeipmi --disable-lto
    env: CFLAGS='-O1 -DNETDATA_INTERNAL_CHECKS=1 -DNETDATA_VERIFY_LOCKS=1'

  - name: Docker container build process (alpine installation)
    script: packaging/docker/build.sh
    env: DEVEL="true"

  - name: Run 'make dist' validation
    script:
    - docker run -it -v "${PWD}:/code:rw" -w /code "netdata/os-test:ubuntu1804" make clean || echo "Nothing to clean"
    - docker run -it -v "${PWD}:/code:rw" -w /code "netdata/os-test:ubuntu1804" autoreconf -ivf && ./configure --prefix=/usr/local/netdata/usr --sysconfdir=/usr/local/netdata/etc --localstatedir=/usr/local/netdata/var --with-zlib --with-math --with-user=netdata CFLAGS=-O2
    - docker run -it -v "${PWD}:/code:rw" -w /code "netdata/os-test:ubuntu1804" make dist
    - docker run -it -v "${PWD}:/code:rw" -w /code "netdata/os-test:ubuntu1804" make distclean
    after_failure: post_message "TRAVIS_MESSAGE" "'make dist' failed"


  - stage: Artifacts validation

    name: Unit Testing
    script:
    - fakeroot ./netdata-installer.sh --install $HOME --dont-wait --dont-start-it --enable-plugin-nfacct --enable-plugin-freeipmi --disable-lto
    - $HOME/netdata/usr/sbin/netdata -W unittest
    env: CFLAGS='-O1 -DNETDATA_INTERNAL_CHECKS=1 -DNETDATA_VERIFY_LOCKS=1'
    after_failure: post_message "TRAVIS_MESSAGE" "Unit testing failed"
    after_success: post_message "TRAVIS_MESSAGE" "Unit testing successful"

  - name: Build/install on ubuntu 14.04 (not containerized)
    script: fakeroot ./netdata-installer.sh --dont-wait --dont-start-it --install $HOME

  - name: Build/Install for ubuntu 18.04 (not containerized)
    script: fakeroot ./netdata-installer.sh --dont-wait --dont-start-it --install $HOME

  - name: Run netdata lifecycle, on ubuntu 18.04 (Containerized)
    script: docker run -it -v "${PWD}:/code:rw" -w /code "netdata/os-test:ubuntu1804" bats --tap tests/lifecycle.bats

  - name: Build/install for CentOS 6 (Containerized)
    script: docker run -it -v "${PWD}:/code:rw" -w /code "netdata/os-test:centos6" ./netdata-installer.sh --dont-wait --dont-start-it --install /tmp

  - name: Build/install for CentOS 7 (Containerized)
    script: docker run -it -v "${PWD}:/code:rw" -w /code "netdata/os-test:centos7" ./netdata-installer.sh --dont-wait --dont-start-it --install /tmp



  - stage: Packaging for release

    name: Create release (only on special commit msg)
    install:
    - sudo apt-get install -y gnupg libcap2-bin zlib1g-dev uuid-dev fakeroot python-pip
    - sudo apt install -y --only-upgrade docker-ce
    - sudo pip install git-semver
    - docker info
    before_script: post_message "TRAVIS_MESSAGE" "Starting .travis/releaser.sh"
    script: ".travis/releaser.sh"
    after_failure: post_message "TRAVIS_MESSAGE" "@here .travis/releaser.sh failed"
    git:
      depth: false



  - stage: Publish release
  - name: Build & Publish docker images
    before_script: post_message "TRAVIS_MESSAGE" "Publishing docker images"
    script:
    - packaging/docker/build.sh
    - packaging/docker/publish.sh
    after_failure: post_message "TRAVIS_MESSAGE" "@here Docker image publishing failed "
    env: ALLOW_SOFT_FAILURE_HERE=true




    # This is the nightly pre-execution step
  - stage: Nightly operations

  - name: Run coverity scan
    # Just notify people that Nightly ops triggered, use the first step as a hook to do that
    before_script: post_message "TRAVIS_MESSAGE" "Starting nightly operations"
    script: ./coverity-install.sh && ./coverity-scan.sh || echo "Coverity failed :("

  - name: Kickstart files integrity testing (extended)
    script: ./tests/installer/checksums.sh

  - name: Run labeler on github issues
    script: .travis/labeler.sh # labeler should be replaced with GitHub Actions when they hit GA

    # This is generating the changelog for nightly release and publish it
  - name: Generate nightly changlog
    before_script: post_message "TRAVIS_MESSAGE" "Starting changelog generation for nightlies"
    script: ".travis/nightlies.sh"
    after_failure: post_message "TRAVIS_MESSAGE" "@here Nightly changelog generation failed "



    # This is the nightly execution step
    #
  - stage: Nightly release

    before_install: openssl aes-256-cbc -K $encrypted_8daf19481253_key -iv $encrypted_8daf19481253_iv -in .travis/gcs-credentials.json.enc -out .travis/gcs-credentials.json -d
    install:
    - sudo apt install -y --only-upgrade docker-ce
    - docker info

  - name: Build & Publish docker images
    before_script: post_message "TRAVIS_MESSAGE" "Publishing docker images "
    script:
    - packaging/docker/build.sh
    - packaging/docker/publish.sh
    after_failure: post_message "TRAVIS_MESSAGE" "@here Nightly docker image publish failed "
    env: ALLOW_SOFT_FAILURE_HERE=true

  - name: Create nightly release artifacts, publish to GCS
    script: .travis/create_artifacts.sh
    after_failure: post_message "TRAVIS_MESSAGE" "@here Nightly artifacts generation failed "

    git:
      depth: false
    deploy:
      provider: gcs
      edge:
        branch: gcs-ng
      project_id: netdata-storage
      credentials: .travis/gcs-credentials.json
      bucket: "netdata-nightlies"
      skip_cleanup: true
      local_dir: "artifacts"
    after_deploy: rm -f .travis/gcs-credentials.json
